#!/bin/bash
set -o errexit

function scanPorts {
  # Includes ports of Nginx, Mysql, ElasticSearch, Redis, and Rabbitmq
  local ports="80 443 3306 5672 9200 9300 15672"
  local mode=$1 # before, after
  local isValid=true

  for port in $ports; do
    if [ $mode = "before" ]; then
      curl --silent --output /dev/null 127.0.0.1:$port
      if [ $? = 0 ]; then
        echo "Port [$port] is already allocated"
        isValid=false
      fi
    else # after
      curl --silent --output /dev/null 127.0.0.1:$port
      if [ $? != 0 ]; then
        isValid=false
      fi
    fi
  done

  [ $isValid = true ] && return 0 || return 1
}

# 1. Scan available ports if docker containers are not running
docker-compose exec app id >/dev/null 2>&1 || scanPorts "before"
[ $? != 0 ] && echo "Failed to start docker because some ports are already allocated" && exit 1

# 2. Scan volumn files
# Check if volume files exist to avoid creating an empty folder

# Ref: https://stackoverflow.com/a/51789677/9821321
function parseYaml {
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
  sed -ne "s|,$s\]$s\$|]|" \
      -e "s|^\($s\)\($w\)$s:$s\[$s\(.*\)$s\]|\1\2:\n\1  - \3|;p" $1 | \
  sed -ne "s|,$s}$s\$|}|" \
      -e "s|^\($s\)-$s{$s\(.*\)$s}|\1-\n\1  \2|;p" | \
  sed -ne "s|^\($s\):|\1|" \
      -e "s|^\($s\)-$s[\"']\(.*\)[\"']$s\$|\1$fs$fs\2|p" \
      -e "s|^\($s\)-$s\(.*\)$s\$|\1$fs$fs\2|p" \
      -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
      -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" | \
  awk -F$fs '{
    indent = length($1)/2;
    vname[indent] = $2;
    for (i in vname) {if (i > indent) {delete vname[i]; idx[i]=0}}
    if (length($2) == 0) {vname[indent] = ++idx[indent] };
    if (length($3) > 0) {
      vn=""; for (i=0; i<indent; i++) {vn = (vn)(vname[i])("_")}
      if ("'$2'_" == vn) {
         print substr($3 ,1 , match($3,":")-1)
      }
    }
  }'
}

function scanVolumeFiles {
  local volume_list=$1
  local ignore_list="./src/app/code ./src/m2-hotfixes ./src/patches ./src/var/log ./src/var/report ./src"
  local isValid=true

  for file in $volume_list; do
    if [ ! -e $file ] && [[ ! " $ignore_list " =~ " $file " ]]; then
      echo "$file: No such file or directory"
      isValid=false
    fi
  done

  [ $isValid = true ] && return 0 || return 1
}

if [ "$1" != "--no-dev" ]; then
  VOLUME_LIST=$(parseYaml docker-compose.dev.yml services_app_volumes)
  # Loop through all files missing from the docker-compose.dev.yml file
  scanVolumeFiles "$VOLUME_LIST"
  # Wait to exit until all missing files have been outputted to the user
  [ $? = false ] && echo "Failed to start docker for missing volume files" && exit 1
fi

# 3. Start all docker container
if [ "$1" == "--no-dev" ]; then
  docker-compose -f docker-compose.yml up -d --remove-orphans
else
  docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --remove-orphans "$@"
fi
[ $? != 0 ] && exit 1

## Blackfire support
# ------------------
## First register the blackfire agent with:
#bin/root blackfire-agent --register --server-id={YOUR_SERVER_ID} --server-token={YOUR_SERVER_TOKEN}
## Then uncomment the below line (and leave uncommented) to start the agent automatically with bin/start:
#bin/root /etc/init.d/blackfire-agent start

echo "Waiting for all services of containers to be ready..."

# 4. Scan allocated ports, retry 20 times
count=0
until [ "$count" -ge 20 ]
do
  sleep 1
  printf "."
  scanPorts "after" && break
  count=$((count+1))
done

# 5. Check service health, retry 20 times
count=0
until [ "$count" -ge 20 ]
do
  sleep 1
  printf "."
  bin/clinotty curl --silent --output /dev/null http://elasticsearch:9200/_cat/health?h=st \
    && curl --silent --output /dev/null  http://guest:guest@localhost:15672/api/overview \
    && bin/redis redis-cli ping > /dev/null \
    && bin/mysql -e "show databases;" >/dev/null \
    && break
  count=$((count+1))
done

echo && echo "All services of containers are started"

bin/cache-clean --quiet --watch &
